name: Build

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*.*.*' ]     # build & publish quand tu pousses un tag vX.Y.Z
  release:
    types: [published]      # si tu crées la release depuis l’UI
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN:     ${{ secrets.GITHUB_TOKEN }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_args: "--win nsis"
            artifact_name: windows-dist
          - os: ubuntu-latest
            build_args: "--linux AppImage"
            artifact_name: linux-dist
          - os: macos-latest
            build_args: "--mac dmg"
            artifact_name: macos-dist

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Linux build deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools rpm fakeroot

      - name: Install deps (ci or i)
        shell: bash
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      # Build en utilisant TA config YAML (=> noms sans version)
      - name: Build app
        run: npx electron-builder ${{ matrix.build_args }} -p never --config electron-builder.yml

      # Attache les fichiers buildés à la Release (sur TAG ou RELEASE)
      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.exe
            dist/*.msi
            dist/*.AppImage
            dist/*.dmg
            dist/*.zip
            dist/*latest*.yml
            dist/*.blockmap
          fail_on_unmatched_files: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # Artefacts dans l’onglet Actions (facultatif)
      - name: Upload dist artifacts (Actions)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/**
